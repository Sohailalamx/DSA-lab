#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void bubble_Sort(int *arr, int n) {
    int i, j, swapped;
    for(i = 0; i < n - 1; i++)
    {
        swapped = 0;
        for(j = 0; j < n - i -1; j++)
        {
            if(arr[j] > arr[j+1])
            {
                swap(arr+j, arr+j+1);
                swapped = 1;
            }
        }
        if(swapped == 0) break;            // by this check if array is already sorted 
    }                                      //or be sorted in the middile the process will stop.
}

void selection_Sort(int *arr, int n) {
    int i, j, min_val_ind;
    for(i = 0; i < n - 1; i++)
    {
        min_val_ind = i;
        for(j = i +1; j < n; j++)
        {
            if(arr[j] < arr[min_val_ind])
            {
                min_val_ind = j;
            }
        }
        swap(arr + i, arr + min_val_ind);
    }
}

void insertion_Sort(int * arr, int n) {
    int i, j, key;
    for(i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;
        while(j >= 0 && arr[j] > key)
        {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

void marge(int *arr, int low, int high) {
    int m = low + (high-low)/2;
    int n1 = m-low+1, n2 = high-m;
    int arr1[n1];
    int arr2[n2];
    int i, j , k;

    for(i = 0; i < n1; i++) { arr1[i] = arr[low+i];}
    for(i = 0; i < n2; i++) { arr2[i] = arr[m + 1 + i];}

    i = j = k = 0;
    while(i < n1 && j < n2)
    {
        if(arr1[i] <= arr2[j])
        {
            arr[low+k] = arr1[i];
            i++; k++;
        }
        else
        {
            arr[low+k] = arr2[j];
            j++; k++;
        }
    }

    while(i < n1)
    {
        arr[low+k] = arr1[i];
        i++; k++;
    }
    while(j < n2)
    {
        arr[low+k] = arr2[j];
        j++; k++;
    }
}

void merge_Sort(int *arr, int low, int high) {
    if(low < high)
    {
        int mid = low + (high - low)/2;
        merge_Sort(arr, low, mid);
        merge_Sort(arr, mid + 1, high);
        
        int n1 = mid-low+1, n2 = high-mid;
        int *arr1 = (int*) calloc(n1, sizeof(int));
        int *arr2 = (int*) calloc(n2, sizeof(int));
        int i, j , k;

        for(i = 0; i < n1; i++)
        {
            arr1[i] = arr[low+i];
        } 

        for(i = 0; i < n2; i++)
        {
            arr2[i] = arr[mid + 1 + i];
        } 

        i = j = k = 0;
        while(i < n1 && j < n2)
        {
            if(arr1[i] <= arr2[j])
            {
                arr[low+k] = arr1[i];
                i++; k++;
            }
            else
            {
                arr[low+k] = arr2[j];
                j++; k++;
            }
        }

        while(i < n1)
        {
            arr[low+k] = arr1[i];
            i++; k++;
        }
        while(j < n2)
        {
            arr[low+k] = arr2[j];
            j++; k++;
        }
    }
    
}

void quick_Sort(int *arr, int l, int h) {
    if(l < h) 
    {
        int pivot = arr[l];
        int i = l - 1, j = h + 1;
        while(1)
        {
            do{
                i++;
            } while(arr[i] < pivot);
            do{
                j--;
            } while(arr[j] > pivot);

            if(i >= j) break;
            swap(arr + i, arr + j);
        }
        quick_Sort(arr, l, j);
        quick_Sort(arr, j + 1, h);
    }
}

void display(int *arr, int n) {
    int i;
    for(i = 0; i < n; i++) 
        printf("%d ", arr[i]);
}

int main () {
    int n, i;
    printf("Number of element: ");
    scanf("%d", &n);
    int *arr = (int*) calloc(n, sizeof(int));

    printf("enter elements:\n");
    for(i = 0; i < n; i++) scanf("%d", arr + i);

    printf("Sortings\n\n insertion -->  1\n selection -->  2\n bubble   --->  3\n quick    --->  4\n merge    --->  5\n");
    scanf("%d", &i);
    switch (i)
    {
    case 1 : insertion_Sort(arr, n); display(arr, n);
        break;
    case 2 : selection_Sort(arr, n); display(arr, n);
        break;
    case 3 : bubble_Sort(arr, n); display(arr, n);
        break;
    case 4 : quick_Sort(arr, 0, n-1); display(arr, n);
        break;
    case 5 : merge_Sort(arr, 0, n-1); display(arr, n);
        break;

    default: printf("wrong input!");
        break;
    }

    free(arr);
    return 0;
}
