#include <stdio.h>
#include <stdlib.h>

typedef struct node {

    int child;
    struct node *next;

} node;

node* Make_child_circle(int total_child) {

    node *head = NULL;
    node *tail = NULL;
    int x = 1;

    while(total_child--)
    {
        node *new_node = (node*) calloc(1,sizeof(node));
        if(new_node == NULL)
        {
            printf("Memory allocation failed!\n");
            exit(0);
        }
        new_node -> child = x;

        if(head == NULL)
        {
            head = new_node;
            tail = new_node;
        }
        else
        {
            tail -> next = new_node;
            tail = new_node;
        }
        x++;
    }
    tail -> next = head;

    return head;
}

void winner(node *head, int k) {

    node *temp = head;
    while(temp -> next != temp)
    {
        for(int i = 0; i < k - 2; i++)
             temp = temp -> next;

        node *auxi = temp -> next;
        temp -> next = auxi -> next;
        free(auxi);
    }
    printf("child %d will win !", temp -> child);
}

void print(node *head) {

    node *temp = head;

    do
    {
        printf("%d ", temp -> child);
        temp = temp -> next;
    }while(temp != head);

}

int main() {
    int total_child;
    printf("Total child: ");
    scanf("%d", &total_child);
    if(total_child < 1) 
    {
        printf("Invalid input for total_child ! Please enter a positive integer.\n");
        return 0;
    }
    node *head = Make_child_circle(total_child);
    // print(head);
    int k;
    printf("Value of k: ");
    scanf("%d", &k);
    if(k < 1) 
    {
        printf("Invalid input for k. Please enter a positive integer.\n");
        return 0;
    }
    winner(head, k);
    free(head);

    return 0;
}
