#include <stdio.h>
#include <stdlib.h>

typedef struct node
{

    char data;
    struct node *next;

} node;

typedef struct stack
{

    node *head;
    int size;

} stack;

void push(stack *s, char data)
{
    node *new_node = (node *)malloc(sizeof(node));
    new_node->data = data;
    new_node->next = NULL;

    new_node->next = s->head;
    s->head = new_node;
    s->size++;
}

char pop(stack *s)
{

    if (s->head == NULL)
    {
        printf("stack is empty !");
        return 0;
    }
    node *temp = s->head;
    s->head = s->head->next;
    int x = temp->data;
    free(temp);
    s->size--;

    return x;
}

int size(stack *s)
{
    return (*s).size;
}

int top(stack *s)
{
    if (s->head == NULL)
    {
        printf("stack is empty !");
        return 0;
    }
    return s->head->data;
}

int main()
{
    stack s;
    int i = 0;
    char infix[50];
    printf("Enter expression without space:\n");
    scanf("%s", infix);

    while(infix[i] != '\0')
    {
        if(infix[i] == '(') push(&s, infix[i++]);

        else if(infix[i] == ')')
        {
            while(top(&s) != '(') printf("%c", pop(&s));
            pop(&s);
            i++;
        }
        
        else if(infix[i] == '^' || infix[i] == '/' || infix[i] == '*' || infix[i] == '+' || infix[i] == '-')
        {
            if(infix[i] == '^') push(&s, infix[i++]);
            else if(infix[i] == '/' || infix[i] == '*')
            {
                while(top(&s) == '/' || top(&s) == '*' || top(&s) == '^') printf("%c",pop(&s));
                push(&s, infix[i++]);
            }
            else if(infix[i] == '+' || infix[i] == '-')
            {
                while(top(&s) == '/' || top(&s) == '*' || top(&s) == '+' || top(&s) == '-' || top(&s) == '^') printf("%c", pop(&s));
                push(&s, infix[i++]);
            }
        }

        else printf("%c", infix[i++]);
    }

    while(size(&s))
    {
        printf("%c", pop(&s));
    }
    return 0;
}
